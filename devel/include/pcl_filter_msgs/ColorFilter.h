// Generated by gencpp from file pcl_filter_msgs/ColorFilter.msg
// DO NOT EDIT!


#ifndef PCL_FILTER_MSGS_MESSAGE_COLORFILTER_H
#define PCL_FILTER_MSGS_MESSAGE_COLORFILTER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pcl_filter_msgs
{
template <class ContainerAllocator>
struct ColorFilter_
{
  typedef ColorFilter_<ContainerAllocator> Type;

  ColorFilter_()
    : status(false)
    , color(0)
    , rmax(0)
    , rmin(0)
    , gmax(0)
    , gmin(0)
    , bmax(0)
    , bmin(0)  {
    }
  ColorFilter_(const ContainerAllocator& _alloc)
    : status(false)
    , color(0)
    , rmax(0)
    , rmin(0)
    , gmax(0)
    , gmin(0)
    , bmax(0)
    , bmin(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef int32_t _color_type;
  _color_type color;

   typedef int32_t _rmax_type;
  _rmax_type rmax;

   typedef int32_t _rmin_type;
  _rmin_type rmin;

   typedef int32_t _gmax_type;
  _gmax_type gmax;

   typedef int32_t _gmin_type;
  _gmin_type gmin;

   typedef int32_t _bmax_type;
  _bmax_type bmax;

   typedef int32_t _bmin_type;
  _bmin_type bmin;





  typedef boost::shared_ptr< ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> const> ConstPtr;

}; // struct ColorFilter_

typedef ::pcl_filter_msgs::ColorFilter_<std::allocator<void> > ColorFilter;

typedef boost::shared_ptr< ::pcl_filter_msgs::ColorFilter > ColorFilterPtr;
typedef boost::shared_ptr< ::pcl_filter_msgs::ColorFilter const> ColorFilterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pcl_filter_msgs::ColorFilter_<ContainerAllocator1> & lhs, const ::pcl_filter_msgs::ColorFilter_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.color == rhs.color &&
    lhs.rmax == rhs.rmax &&
    lhs.rmin == rhs.rmin &&
    lhs.gmax == rhs.gmax &&
    lhs.gmin == rhs.gmin &&
    lhs.bmax == rhs.bmax &&
    lhs.bmin == rhs.bmin;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pcl_filter_msgs::ColorFilter_<ContainerAllocator1> & lhs, const ::pcl_filter_msgs::ColorFilter_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pcl_filter_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c90ee72f464580a4d176603c4887e20c";
  }

  static const char* value(const ::pcl_filter_msgs::ColorFilter_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc90ee72f464580a4ULL;
  static const uint64_t static_value2 = 0xd176603c4887e20cULL;
};

template<class ContainerAllocator>
struct DataType< ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pcl_filter_msgs/ColorFilter";
  }

  static const char* value(const ::pcl_filter_msgs::ColorFilter_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool status\n"
"int32 color      \n"
"int32 rmax\n"
"int32 rmin\n"
"int32 gmax\n"
"int32 gmin\n"
"int32 bmax\n"
"int32 bmin\n"
;
  }

  static const char* value(const ::pcl_filter_msgs::ColorFilter_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.color);
      stream.next(m.rmax);
      stream.next(m.rmin);
      stream.next(m.gmax);
      stream.next(m.gmin);
      stream.next(m.bmax);
      stream.next(m.bmin);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ColorFilter_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pcl_filter_msgs::ColorFilter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pcl_filter_msgs::ColorFilter_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "color: ";
    Printer<int32_t>::stream(s, indent + "  ", v.color);
    s << indent << "rmax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rmax);
    s << indent << "rmin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rmin);
    s << indent << "gmax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gmax);
    s << indent << "gmin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gmin);
    s << indent << "bmax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bmax);
    s << indent << "bmin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bmin);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PCL_FILTER_MSGS_MESSAGE_COLORFILTER_H
